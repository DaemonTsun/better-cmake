
# version 1.1

# by default color output is only generated for Make for some reason
add_compile_options (-fdiagnostics-color=always)

# versions
cmake_policy(SET CMP0048 NEW)

macro(get_version_target OUT_VAR NAME)
    set(${OUT_VAR} "${NAME}-${PROJECT_VERSION}")
endmacro()

macro(project_author NAME)
    set(_OPTIONS)
    set(_SINGLE_VAL_ARGS)
    set(_MULTI_VAL_ARGS EMAIL)

    cmake_parse_arguments(PROJECT_AUTHOR "${_OPTIONS}" "${_SINGLE_VAL_ARGS}" "${_MULTI_VAL_ARGS}" ${ARGN})

    set(PROJECT_AUTHOR "${NAME}")
    set(${PROJECT_NAME}_AUTHOR "${NAME}")

    if (DEFINED PROJECT_AUTHOR_EMAIL)
        set(PROJECT_EMAIL ${PROJECT_AUTHOR_EMAIL})
        set(${PROJECT_NAME}_EMAIL ${PROJECT_AUTHOR_EMAIL})
    endif()
endmacro()

macro(generate_project_header OUT_PATH)
    if (NOT DEFINED PROJECT_VERSION)
        message(FATAL_ERROR "generate_project_header: missing PROJECT_VERSION. set it within project(...)")
    endif()

    set(_HEADER "// this file was generated by better-cmake\n")
    set(_HEADER "${_HEADER}// ${PROJECT_NAME} v${PROJECT_VERSION}\n\n")

    if(DEFINED PROJECT_AUTHOR) 
        set(_HEADER "${_HEADER}#define ${PROJECT_NAME}_AUTHOR \"${PROJECT_AUTHOR}\"\n")
    endif()

    set(_HEADER "${_HEADER}#define ${PROJECT_NAME}_VERSION \"${PROJECT_VERSION}\"\n")
    set(_HEADER "${_HEADER}#define ${PROJECT_NAME}_VERSION_MAJOR ${PROJECT_VERSION_MAJOR}\n")
    set(_HEADER "${_HEADER}#define ${PROJECT_NAME}_VERSION_MINOR ${PROJECT_VERSION_MINOR}\n")
    set(_HEADER "${_HEADER}#define ${PROJECT_NAME}_VERSION_PATCH ${PROJECT_VERSION_PATCH}\n")

    if(DEFINED PROJECT_AUTHOR_EMAIL) 
        set(_HEADER "${_HEADER}#define ${PROJECT_NAME}_AUTHOR_EMAIL \"${PROJECT_AUTHOR_EMAIL}\"\n")
    endif()

    file(WRITE "${OUT_PATH}" "${_HEADER}")

    unset(_HEADER)
endmacro()

macro(find_sources OUT_VAR SRC_DIR)
    file(GLOB_RECURSE ${OUT_VAR} "${SRC_DIR}/*.c" "${SRC_DIR}/*.cpp")
endmacro()

macro(find_headers OUT_VAR SRC_DIR)
    file(GLOB_RECURSE ${OUT_VAR} "${SRC_DIR}/*.h" "${SRC_DIR}/*.hpp")
endmacro()

macro(install_library)
    set(_OPTIONS)
    set(_SINGLE_VAL_ARGS TARGET)
    set(_MULTI_VAL_ARGS HEADERS)

    cmake_parse_arguments(INSTALL_LIBRARY "${_OPTIONS}" "${_SINGLE_VAL_ARGS}" "${_MULTI_VAL_ARGS}" ${ARGN})

    if (NOT DEFINED INSTALL_LIBRARY_TARGET)
        message(FATAL_ERROR "install_library: missing TARGET")
    endif()

    if (DEFINED INSTALL_LIBRARY_HEADERS)
        install(FILES ${INSTALL_LIBRARY_HEADERS} DESTINATION "include/${INSTALL_LIBRARY_TARGET}/${PROJECT_NAME}")
    endif()

    install(TARGETS "${INSTALL_LIBRARY_TARGET}"
            RUNTIME DESTINATION "bin"
            LIBRARY DESTINATION "lib"
            ARCHIVE DESTINATION "lib/${INSTALL_LIBRARY_TARGET}")
endmacro()

macro(install_executable)
    set(_OPTIONS)
    set(_SINGLE_VAL_ARGS TARGET)
    set(_MULTI_VAL_ARGS)

    cmake_parse_arguments(INSTALL_EXECUTABLE "${_OPTIONS}" "${_SINGLE_VAL_ARGS}" "${_MULTI_VAL_ARGS}" ${ARGN})

    if (NOT DEFINED INSTALL_EXECUTABLE_TARGET)
        message(FATAL_ERROR "install_executable: missing TARGET")
    endif()

    install(TARGETS "${INSTALL_EXECUTABLE_TARGET}" DESTINATION bin)
endmacro()

macro(export_library_variables NAME)
    if (DEFINED ${NAME}_VERSION)
        set(${NAME}_VERSION ${${NAME}_VERSION} PARENT_SCOPE)
    endif()
    
    if (DEFINED ${NAME}_TARGET)
        set(${NAME}_TARGET ${${NAME}_TARGET} PARENT_SCOPE)
    endif()

    if (DEFINED ${NAME}_SOURCES_DIR)
        set(${NAME}_SOURCES_DIR "${${NAME}_SOURCES_DIR}" PARENT_SCOPE)
    endif()

    if (DEFINED ${NAME}_SOURCES)
        set(${NAME}_SOURCES ${${NAME}_SOURCES} PARENT_SCOPE)
    endif()

    if (DEFINED ${NAME}_HEADERS)
        set(${NAME}_HEADERS ${${NAME}_HEADERS} PARENT_SCOPE)
    endif()
endmacro()
